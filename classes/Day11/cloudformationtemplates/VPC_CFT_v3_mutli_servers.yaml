AWSTemplateFormatVersion: 2010-09-09
Description: AWS Class - Creating VPC, NAT Gateway, Public & Private Subnetes, Internet Gateway, 
  and EIP Using the Cloud Formation Template.

Parameters:
  Environment:
    Description: "Specify the Environment type of the stack."
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  Day:
    Description: Day of the Class
    Type: String
    Default: Day9

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.4.0/24

  TypeOfInstance:
    Description: "Specify the Instance Type."
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small

  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: "The ID of the AMI."
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyPairName:
    Type: String
    Description: The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.
    Default: mumbai
  
  SecurityGroupSuffix:
    Type: String
    Description: Please enter the Security Group Suffix Name
    Default: sg

Mappings:
  Environment:
    dev:
      VPCName: dev-vpc
      ServerName: dev-server
      InstanceType: t2.nano
      PublicSubnetName: dev-public-subnet
      PrivateSubnetName: dev-private-subnet
      InternetGatewayName: dev-internet-gateway
      PublicRouteTableName: dev-public-route-table
      PrivateRouteTableName: dev-private-route-table
      EIPName: dev-eip
      NatGatewayName: dev-nat-gateway
      PublicSecurityGroupName: dev-public-security-group
      PrivateSercurityGroupName: dev-private-security-group
      BastionServerName: dev-bastion
      PrivateServerName: dev-private-server
      PublicServerName: dev-public-server

    test:
      VPCName: test-vpc
      ServerName: test-server
      InstanceType: t2.micro
      PublicSubnetName: test-public-subnet
      PrivateSubnetName: test-private-subnet
      InternetGatewayName: test-internet-gateway
      PublicRouteTableName: test-public-route-table
      PrivateRouteTableName: test-private-route-table
      EIPName: test-eip
      NatGatewayName: test-nat-gateway
      PublicSecurityGroupName: test-public-security-group
      PrivateSercurityGroupName: test-private-security-group
      BastionServerName: test-bastion
      PrivateServerName: test-private-server
      PublicServerName: test-public-server

    prod:
      VPCName: prod-vpc
      ServerName: prod-server
      InstanceType: t2.small
      PublicSubnetName: prod-public-subnet
      PrivateSubnetName: prod-private-subnet
      InternetGatewayName: prod-internet-gateway
      PublicRouteTableName: prod-public-route-table
      PrivateRouteTableName: prod-private-route-table
      EIPName: prod-eip
      NatGatewayName: prod-nat-gateway
      PublicSecurityGroupName: prod-public-security-group
      PrivateSercurityGroupName: prod-private-security-group
      BastionServerName: prod-bastion
      PrivateServerName: prod-private-server
      PublicServerName: prod-public-server

Conditions:
    isProduction: !Equals
      - !Ref Environment
      - prod
    isDev: !Equals
      - !Ref Environment
      - dev
    isTest: !Equals
      - !Ref Environment
      - test

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, VPCName]
        - Key: Day
          Value: !Ref Day

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PublicSubnetName], 1]]
        - Key: Day
          Value: !Ref Day

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PublicSubnetName], 2]]
        - Key: Day
          Value: !Ref Day

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PrivateSubnetName], 1]]
        - Key: Day
          Value: !Ref Day

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PrivateSubnetName], 2]]
        - Key: Day
          Value: !Ref Day
  
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, InternetGatewayName]
        - Key: Day
          Value: !Ref Day

  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, PublicRouteTableName]
        - Key: Day
          Value: !Ref Day
  
  MainRouteTableIGWAttachement:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, PrivateRouteTableName]
        - Key: Day
          Value: !Ref Day
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: MyIGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, EIPName]
        - Key: Day
          Value: !Ref Day
  
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, NatGatewayName]
        - Key: Day
          Value: !Ref Day
  
  PrivateRouteAssociateNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway
  
  PublicSercuritGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !FindInMap [Environment, !Ref Environment, PublicSecurityGroupName]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, PublicSecurityGroupName]
        - Key: Day
          Value: !Ref Day
    
  PrivateSercuritGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !FindInMap [Environment, !Ref Environment, PrivateSercurityGroupName]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, PrivateSercurityGroupName]
        - Key: Day
          Value: !Ref Day
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  MyBastionServer:
    Type: AWS::EC2::Instance
    DependsOn: PublicSercuritGroup
    Properties:
      SubnetId: !Ref PublicSubnet1
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [Environment, !Ref Environment, InstanceType]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref PublicSercuritGroup
      Tags:
        - Key: Name
          Value: !FindInMap [Environment, !Ref Environment, BastionServerName]
        - Key: Day
          Value: !Ref Day
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello this is from Bastion Server, i.e., Public Subnet 1" > /var/www/html/index.html
  
  MyPrivateServer1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSercuritGroup
    Properties:
      SubnetId: !Ref PrivateSubnet1
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [Environment, !Ref Environment, InstanceType]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref PrivateSercuritGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PrivateServerName], 1]]
        - Key: Day
          Value: !Ref Day
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello this is from Private Server, i.e., Private Subnete 1" > /var/www/html/index.html
            yum update -y
            yum install python3
  
  MyPublicServer:
    Type: AWS::EC2::Instance
    DependsOn: PublicSercuritGroup
    Properties:
      SubnetId: !Ref PublicSubnet2
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [Environment, !Ref Environment, InstanceType]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref PublicSercuritGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PublicServerName], 2]]
        - Key: Day
          Value: !Ref Day
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello this is from Public Server, i.e., Public Subnet 2" > /var/www/html/index.html
  
  MyPrivateServer2:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSercuritGroup
    Properties:
      SubnetId: !Ref PrivateSubnet2
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [Environment, !Ref Environment, InstanceType]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref PrivateSercuritGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PrivateServerName], 2]]
        - Key: Day
          Value: !Ref Day
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello this is from Private Server, i.e., Private Subnete 2" > /var/www/html/index.html
            yum install mysql-community-server
            yum install mysql-community-libs
            systemctl start mysqld

  MyJavaServer:
    Type: AWS::EC2::Instance
    Condition: isProduction
    DependsOn: PrivateSercuritGroup
    Properties:
      SubnetId: !Ref PrivateSubnet2
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [Environment, !Ref Environment, InstanceType]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref PrivateSercuritGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PrivateServerName], java-server]]
        - Key: Day
          Value: !Ref Day
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello this is from Java Server, i.e., Private Subnete 2" > /var/www/html/index.html
            yum install mysql-community-server
            yum install mysql-community-libs
            systemctl start mysqld
  
  MyDevPythonServer:
    Type: AWS::EC2::Instance
    Condition: isDev
    DependsOn: PrivateSercuritGroup
    Properties:
      SubnetId: !Ref PrivateSubnet2
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [Environment, !Ref Environment, InstanceType]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref PrivateSercuritGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PrivateServerName], python-server]]
        - Key: Day
          Value: !Ref Day
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello this is from Python Server, i.e., Private Subnete 2" > /var/www/html/index.html
            yum install mysql-community-server
            yum install mysql-community-libs
            systemctl start mysqld

  MyTestDockerServer:
    Type: AWS::EC2::Instance
    Condition: isTest
    DependsOn: PrivateSercuritGroup
    Properties:
      SubnetId: !Ref PrivateSubnet2
      ImageId: !Ref AmiID
      InstanceType: !FindInMap [Environment, !Ref Environment, InstanceType]
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref PrivateSercuritGroup
      Tags:
        - Key: Name
          Value: !Join ["-", [!FindInMap [Environment, !Ref Environment, PrivateServerName], docker-server]]
        - Key: Day
          Value: !Ref Day
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "Hello this is Docker Server, i.e., Private Subnete 2" > /var/www/html/index.html
            yum install mysql-community-server
            yum install mysql-community-libs
            systemctl start mysqld